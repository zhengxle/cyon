The following has a high cost of starting up a node again. If the store
contains a lot of keys it will definately take time and take up bandwidth.

[Node startup]
	- Connects to a single node at startup (can be any node in cluster)
		- Exchanges random node-to-node sequence number
		- Exchanges list of available nodes
	- Connects to other nodes in the cluster
		- Exchanges random node-to-node sequence number
	- Maps store (or replays log, cant possibly be good to do this when we
	  are replaying a log file? If a key has been added/removed/added it
	  will cause a lot of REPL for no need.)
		- Per key added sends a REPL to all nodes in cluster
			- Operation
			- Timestamp, [sha1 of data if PUT/REPLACE]
			- Sequence number, then increments it
	- Node now started, can serve requests
	- Node will receive REPL_OK or REPL_NEEDUPDATE from nodes for
	  the keys sent over the wire.
		- If the majority of nodes says REPL_OK it will not
		  update the content for the key
		- If the majoroity of nodes says REPL_NEEDUPDATE it will
		  select one of the nodes that said so and ask for content



